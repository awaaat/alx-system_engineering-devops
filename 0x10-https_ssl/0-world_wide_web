#!/usr/bin/env bash
# Script Name: 0-world_wide_web
# Description: This Bash script queries DNS records for subdomains of a given domain
#              using the 'dig' command. It displays the record type and destination
#              for specified subdomains or a default set of subdomains.
# Purpose: To audit DNS configurations for subdomains as part of a system
#          administration task, ensuring correct DNS mappings for a domain.
# Usage: ./0-world_wide_web <domain> [subdomain]
#   - domain: The domain name to audit (e.g., example.com)
#   - subdomain: Optional specific subdomain to audit (e.g., www)
# Output: Prints lines in the format:
#         "The subdomain [SUB_DOMAIN] is a [RECORD_TYPE] record and points to [DESTINATION]"
# Requirements:
#   - Must use 'awk' for parsing DNS output
#   - Must include at least one Bash function
#   - Must handle both single domain and domain+subdomain inputs
#   - Must pass Shellcheck (version 0.3.7) without errors
#   - Ignores nonexistent subdomains (per project requirements)
# Author: [Your Name]
# Date: July 14, 2025

# Function: get_subdomain_info
# Description: Queries DNS information for a specific subdomain using 'dig',
#              extracts the record type and destination, and prints the result
#              in the required format.
# Arguments:
#   $1 - domain: The domain name (e.g., example.com)
#   $2 - subdomain: The subdomain to query (e.g., www)
# Returns: Prints the DNS information or nothing if no valid record is found
#!/usr/bin/env bash
# Displays DNS record information for subdomains of a given domain using 'dig'

# Function: get_subdomain_info
# Description: Queries DNS records for a specific subdomain and prints the record
#              type and destination in the required format.
# Arguments:
#   $1 - domain: The domain name (e.g., holberton.online)
#   $2 - subdomain: The subdomain to query (e.g., www)
# Returns: Prints formatted DNS information or nothing if no record is found
get_subdomain_info() {
    local domain="$1"        # Store domain name
    local subdomain="$2"     # Store subdomain name
    local full_domain="${subdomain}.${domain}"  # Construct full domain (e.g., www.holberton.online)

    # Query DNS with 'dig' and get the ANSWER SECTION
    # Use 'grep -A1' to capture the line after "ANSWER SECTION:"
    # Use 'tail -n1' to get only the answer line
    local answer_line
    answer_line=$(dig "${full_domain}" | grep -A1 'ANSWER SECTION:' | tail -n1)

    # Check if answer_line is non-empty (indicating a valid DNS record)
    if [ -n "${answer_line}" ]; then
        # Extract record type (e.g., A, CNAME) and destination (e.g., IP or hostname)
        # Example answer_line: www.holberton.online. 87 IN A 54.210.47.110
        # Fields: $1=full domain, $2=TTL, $3=class, $4=record type, $5=destination
        local record_type
        local destination
        record_type=$(echo "${answer_line}" | awk '{print $4}')
        destination=$(echo "${answer_line}" | awk '{print $5}')

        # Only print if both record_type and destination are non-empty
        if [ -n "${record_type}" ] && [ -n "${destination}" ]; then
            echo "The subdomain ${subdomain} is a ${record_type} record and points to ${destination}"
        fi
    fi
    # Silently return if no record is found (per requirement to ignore nonexistent subdomains)
}

# Main Script Logic
# Description: Processes command-line arguments and queries DNS for subdomains

# Check number of arguments
if [ "$#" -eq 1 ]; then
    # Only domain provided; check default subdomains in order
    domain="$1"
    subdomains=("www" "lb-01" "web-01" "web-02")
    for subdomain in "${subdomains[@]}"; do
        get_subdomain_info "${domain}" "${subdomain}"
    done
elif [ "$#" -eq 2 ]; then
    # Domain and subdomain provided; check only the specified subdomain
    domain="$1"
    subdomain="$2"
    get_subdomain_info "${domain}" "${subdomain}"
else
    # Incorrect number of arguments; show usage and exit
    echo "Usage: $0 domain [subdomain]"
    exit 1
fi